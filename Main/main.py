#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Punto de Entrada Principal - Notificador de Vencimientos VTV
============================================================

Este script orquesta el proceso completo de notificaci√≥n:
1. Configura el entorno.
2. Carga y procesa los datos de los clientes desde un archivo Excel.
3. Filtra los clientes cuyas VTV est√°n pr√≥ximas a vencer O ya vencidas.
4. Inicializa WhatsApp Web a trav√©s de Selenium.
5. Itera sobre los clientes a notificar y env√≠a un mensaje personalizado.
6. Genera un reporte con los env√≠os que no pudieron completarse.
"""

import time
import os
import logging

from whatsapp_notifier import WhatsAppNotifier
from data_handler import DataHandler
from utils import configurar_logging
from config import (
    ARCHIVO_EXCEL,
    REPORTE_FALLIDOS_EXCEL,
    INTERVALO_MENSAJES,
    MENSAJE_TEMPLATE,
    MENSAJE_VENCIDO_TEMPLATE
)

# Configurar logging al inicio
logger = configurar_logging()

def crear_mensaje_personalizado(dato):
    """
    Crea un mensaje personalizado basado en si la VTV est√° vencida o pr√≥xima a vencer.
    
    Args:
        dato (dict): Diccionario con los datos del cliente
        
    Returns:
        str: Mensaje personalizado
    """
    if dato['esta_vencida']:
        # VTV ya vencida - usar plantilla de vencido
        mensaje = MENSAJE_VENCIDO_TEMPLATE.format(
            nombre=dato['nombre'],
            patente=dato['patente'],
            fecha_vencimiento=dato['fecha_vencimiento'],
            dias_vencidos=dato['dias_vencidos']
        )
    else:
        # VTV pr√≥xima a vencer - usar plantilla normal
        mensaje = MENSAJE_TEMPLATE.format(
            nombre=dato['nombre'],
            patente=dato['patente'],
            fecha_vencimiento=dato['fecha_vencimiento']
        )
    
    return mensaje

def ejecutar_proceso():
    """Funci√≥n principal que ejecuta todo el flujo de notificaciones."""
    logger.info("==================================================")
    logger.info("=== INICIANDO PROCESO DE NOTIFICACIONES DE VTV ===")
    logger.info("==================================================")

    # --- 1. Carga y Procesamiento de Datos ---
    if not os.path.exists(ARCHIVO_EXCEL):
        logger.critical(f"‚ùå Error: No se encontr√≥ el archivo de datos '{ARCHIVO_EXCEL}'.")
        logger.critical("Por favor, aseg√∫rate de que el archivo exista en el directorio correcto.")
        return

    data_handler = DataHandler(ARCHIVO_EXCEL)
    
    # Mostrar configuraci√≥n de columnas para debug
    data_handler.mostrar_configuracion_columnas()
    
    try:
        data_handler.cargar_y_procesar_datos()
        vencimientos_df = data_handler.filtrar_vencimientos_proximos()
    except ValueError as e:
        logger.critical(f"‚ùå Error en la estructura del Excel:")
        logger.critical(str(e))
        return
    except Exception as e:
        logger.critical(f"‚ùå Error cr√≠tico al procesar datos: {e}")
        return

    if vencimientos_df.empty:
        logger.info("‚úÖ No hay vencimientos pr√≥ximos ni vencidos para notificar. Proceso finalizado.")
        return

    # --- 2. Preparar datos para env√≠o ---
    datos_envio = data_handler.obtener_datos_para_envio(vencimientos_df)

    # --- 3. Interacci√≥n con el Usuario ---
    print("\n" + "="*60)
    print("           NOTIFICADOR DE VENCIMIENTOS VTV")
    print("="*60)
    print(f"üìä Se encontraron {len(datos_envio)} vencimientos para notificar.")
    
    # Separar vencidas de pr√≥ximas para mostrar estad√≠sticas
    vencidas = [d for d in datos_envio if d['esta_vencida']]
    proximas = [d for d in datos_envio if not d['esta_vencida']]
    
    if len(vencidas) > 0:
        print(f"üî¥ VTV VENCIDAS: {len(vencidas)}")
    if len(proximas) > 0:
        print(f"üü° VTV PR√ìXIMAS A VENCER: {len(proximas)}")
    
    print("üåê A continuaci√≥n se abrir√° Google Chrome para conectar con WhatsApp Web.")
    print()
    print("üìã INSTRUCCIONES:")
    print("  1. Escanea el c√≥digo QR con tu tel√©fono si es la primera vez.")
    print("  2. Una vez iniciada la sesi√≥n, el proceso comenzar√° autom√°ticamente.")
    print("  3. NO CIERRES el navegador hasta que el proceso finalice.")
    print("="*60)

    # Mostrar preview de los primeros contactos
    print("\nüìã PREVIEW DE CONTACTOS A NOTIFICAR:")
    for i, dato in enumerate(datos_envio[:5]):
        estado = "VENCIDA" if dato['esta_vencida'] else "Por vencer"
        if dato['esta_vencida']:
            print(f"  {i+1}. {dato['nombre']} - {dato['patente']} ({estado} hace {dato['dias_vencidos']} d√≠as)")
        else:
            print(f"  {i+1}. {dato['nombre']} - {dato['patente']} ({estado} {dato['fecha_vencimiento']})")
    if len(datos_envio) > 5:
        print(f"  ... y {len(datos_envio) - 5} m√°s")

    respuesta = input("\n¬øDeseas continuar con el env√≠o de notificaciones? (s/n): ")
    if respuesta.lower() not in ['s', 'si', 's√≠', 'y', 'yes']:
        logger.info("‚ùå Proceso cancelado por el usuario.")
        return

    # --- 4. Inicializaci√≥n de WhatsApp ---
    logger.info("üöÄ Iniciando WhatsApp Web...")
    notificador = WhatsAppNotifier()
    if not notificador.inicializar_driver():
        return
    if not notificador.abrir_whatsapp():
        notificador.cerrar()
        return

    # --- 5. Proceso de Env√≠o ---
    enviados_count = 0
    fallidos_list = []
    total_a_enviar = len(datos_envio)

    logger.info(f"üì§ Comenzando env√≠o de {total_a_enviar} mensajes...")

    for i, dato in enumerate(datos_envio):
        estado_log = "VENCIDA" if dato['esta_vencida'] else "Por vencer"
        logger.info(f"üì® Procesando {i+1}/{total_a_enviar}: {dato['nombre']} ({dato['numero']}) - {estado_log} ---")

        # Crear mensaje personalizado seg√∫n el estado
        mensaje = crear_mensaje_personalizado(dato)
        
        # Log del tipo de mensaje que se enviar√°
        tipo_mensaje = "VENCIDA" if dato['esta_vencida'] else "PR√ìXIMA A VENCER"
        logger.info(f"üìù Enviando mensaje de VTV {tipo_mensaje}")

        # Enviar notificaci√≥n
        exito, razon_fallo = notificador.enviar_notificacion(dato['numero'], mensaje)

        if exito:
            enviados_count += 1
            logger.info(f"‚úÖ Mensaje enviado exitosamente a {dato['nombre']}")
        else:
            logger.error(f"‚ùå Fallo al enviar a {dato['nombre']}: {razon_fallo}")
            fallidos_list.append({
                'NombreDelCliente': dato['nombre'],
                'NumeroDeWhatsapp': dato['numero_original'],
                'NumeroValidado': dato['numero'],
                'Patente': dato['patente'],
                'FechaVencimientoVTV': dato['fecha_vencimiento'],
                'EstadoVTV': 'VENCIDA' if dato['esta_vencida'] else 'PR√ìXIMA A VENCER',
                'DiasVencidos': dato['dias_vencidos'] if dato['esta_vencida'] else 0,
                'MotivoDelFallo': razon_fallo
            })

        # Esperar antes del pr√≥ximo env√≠o (excepto en el √∫ltimo)
        if i < total_a_enviar - 1:
            logger.info(f"‚è±Ô∏è Esperando {INTERVALO_MENSAJES} segundos para el pr√≥ximo env√≠o...")
            time.sleep(INTERVALO_MENSAJES)

    # --- 6. Finalizaci√≥n y Reporte ---
    logger.info("\n" + "="*60)
    logger.info("=== PROCESO DE NOTIFICACIONES COMPLETADO ===")
    logger.info(f"üìä Total de vencimientos a notificar: {total_a_enviar}")
    logger.info(f"‚úÖ Mensajes enviados exitosamente: {enviados_count}")
    logger.info(f"‚ùå Mensajes fallidos: {len(fallidos_list)}")
    
    if len(fallidos_list) > 0:
        logger.info("üìã Contactos con fallo:")
        for fallido in fallidos_list:
            logger.info(f"  - {fallido['NombreDelCliente']}: {fallido['MotivoDelFallo']}")
    
    logger.info("="*60)

    # Generar reporte de fallidos
    data_handler.crear_reporte_fallidos(fallidos_list, REPORTE_FALLIDOS_EXCEL)

    # Cerrar navegador
    notificador.cerrar()
    logger.info("üéâ El script ha finalizado. Revisa el log y el reporte de fallidos si es necesario.")

    # Mostrar resumen final
    print("\n" + "="*60)
    print("           RESUMEN FINAL")
    print("="*60)
    print(f"‚úÖ Enviados exitosamente: {enviados_count}/{total_a_enviar}")
    print(f"‚ùå Fallidos: {len(fallidos_list)}/{total_a_enviar}")
    
    # Mostrar desglose por tipo
    if len(vencidas) > 0 or len(proximas) > 0:
        print("\nüìä DESGLOSE POR TIPO:")
        if len(vencidas) > 0:
            print(f"üî¥ VTV Vencidas notificadas: {len(vencidas)}")
        if len(proximas) > 0:
            print(f"üü° VTV Pr√≥ximas notificadas: {len(proximas)}")
    
    if len(fallidos_list) > 0:
        print(f"üìÑ Reporte de fallidos: {REPORTE_FALLIDOS_EXCEL}")
    print("="*60)


if __name__ == "__main__":
    try:
        ejecutar_proceso()
    except KeyboardInterrupt:
        logger.warning("\n‚ö†Ô∏è Proceso interrumpido por el usuario.")
    except Exception as e:
        logger.critical(f"üí• Ha ocurrido un error cr√≠tico no controlado: {e}", exc_info=True)
    finally:
        input("\nüîö Presiona Enter para salir...")  # Evitar que se cierre inmediatamente