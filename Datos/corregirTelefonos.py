#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para corregir n√∫meros de tel√©fono en archivo Excel
=======================================================

Este script toma tu archivo Excel original y genera uno nuevo con todas las columnas
intactas, pero con los n√∫meros de tel√©fono corregidos usando la funci√≥n de validaci√≥n.
"""

import pandas as pd
import sys
import os
from datetime import datetime

# Agregar el directorio actual al path para importar los m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from config import ARCHIVO_EXCEL

def validar_numero_telefono_mejorado(numero) -> str | None:
    """
    Funci√≥n mejorada de validaci√≥n (copia de la versi√≥n optimizada)
    """
    import pandas as pd
    import re
    
    # Verificar si el n√∫mero es nulo, vac√≠o o NaN
    if numero is None or pd.isna(numero):
        return None
    
    # Convertir a string y manejar n√∫meros flotantes
    try:
        if isinstance(numero, float):
            if pd.isna(numero):
                return None
            numero_str = str(int(numero))
        else:
            numero_str = str(numero).strip()
    except (ValueError, OverflowError):
        return None
    
    # Verificar que no est√© vac√≠o despu√©s de la conversi√≥n
    if not numero_str or numero_str.lower() in ['nan', 'none', 'null', '']:
        return None
    
    # Remover todos los caracteres que no sean d√≠gitos
    numero_limpio = re.sub(r'[^\d]', '', numero_str)
    
    # Verificar que queden d√≠gitos despu√©s de la limpieza
    if not numero_limpio or not numero_limpio.isdigit():
        return None
    
    # Remover prefijo de pa√≠s Argentina (54) si existe
    if numero_limpio.startswith('54'):
        numero_limpio = numero_limpio[2:]
    
    # Manejar n√∫meros que empiezan con 0
    if numero_limpio.startswith('0'):
        numero_limpio = numero_limpio[1:]
    
    # Verificar longitud
    if len(numero_limpio) < 8 or len(numero_limpio) > 12:
        return None
    
    # Formatear seg√∫n el caso
    if numero_limpio.startswith('11') and len(numero_limpio) == 10:
        return f"549{numero_limpio}"
    elif numero_limpio.startswith('9') and len(numero_limpio) == 11:
        return f"54{numero_limpio}"
    elif numero_limpio.startswith('9') and len(numero_limpio) == 10:
        return f"54{numero_limpio}"
    elif len(numero_limpio) == 10:
        return f"549{numero_limpio}"
    elif len(numero_limpio) == 8:
        return f"5411{numero_limpio}"
    elif len(numero_limpio) == 9:
        return f"549{numero_limpio}"
    elif len(numero_limpio) == 11:
        return f"54{numero_limpio}"
    
    return None


def crear_directorio_corregidos():
    """
    Crea el directorio de archivos corregidos si no existe
    """
    # Obtener el directorio del script actual
    directorio_actual = os.path.dirname(os.path.abspath(__file__))
    
    # Crear la ruta del directorio corregidos
    directorio_corregidos = os.path.join(directorio_actual, 'corregidos')
    
    # Crear el directorio si no existe
    if not os.path.exists(directorio_corregidos):
        os.makedirs(directorio_corregidos)
        print(f"üìÅ Directorio creado: {directorio_corregidos}")
    else:
        print(f"üìÅ Directorio ya existe: {directorio_corregidos}")
    
    return directorio_corregidos


def corregir_telefonos_excel(archivo_excel):
    """
    Toma el archivo Excel y genera uno nuevo con los tel√©fonos corregidos,
    manteniendo todas las dem√°s columnas intactas.
    """
    try:
        # Cargar el Excel manteniendo los tipos de datos originales
        print(f"üìä Cargando archivo: {archivo_excel}")
        df = pd.read_excel(archivo_excel, dtype=str)
        
        # Detectar columna de tel√©fono
        columnas_telefono = ['TEL', 'Telefono', 'NumeroDeWhatsapp', 'WhatsApp', 'Celular', 'Numero']
        columna_telefono = None
        
        print(f"Columnas disponibles: {list(df.columns)}")
        
        for col in columnas_telefono:
            if col in df.columns:
                columna_telefono = col
                break
        
        if not columna_telefono:
            print("‚ùå No se encontr√≥ columna de tel√©fono en el Excel")
            print(f"Columnas disponibles: {list(df.columns)}")
            return None
        
        print(f"‚úÖ Columna de tel√©fono encontrada: {columna_telefono}")
        
        # Crear una copia del DataFrame original
        df_corregido = df.copy()
        
        # Estad√≠sticas iniciales
        total_registros = len(df_corregido)
        telefonos_originales = df_corregido[columna_telefono].notna().sum()
        
        print(f"\nüìà ESTAD√çSTICAS INICIALES:")
        print(f"  Total de registros: {total_registros}")
        print(f"  Tel√©fonos no nulos originales: {telefonos_originales}")
        
        # Mostrar algunos ejemplos de n√∫meros originales
        print(f"\nüìã EJEMPLOS DE N√öMEROS ORIGINALES:")
        ejemplos = df_corregido[columna_telefono].dropna().head(5)
        for i, numero in enumerate(ejemplos, 1):
            print(f"  {i}. '{numero}'")
        
        # Aplicar la correcci√≥n solo a la columna de tel√©fono
        print(f"\nüîÑ Aplicando correcci√≥n a la columna '{columna_telefono}'...")
        
        # Guardar los n√∫meros originales en una nueva columna para referencia
        df_corregido[f'{columna_telefono}_Original'] = df_corregido[columna_telefono].copy()
        
        # Aplicar la validaci√≥n/correcci√≥n
        df_corregido[columna_telefono] = df_corregido[columna_telefono].apply(validar_numero_telefono_mejorado)
        
        # Estad√≠sticas despu√©s de la correcci√≥n
        telefonos_corregidos = df_corregido[columna_telefono].notna().sum()
        telefonos_perdidos = telefonos_originales - telefonos_corregidos
        
        print(f"\nüìä RESULTADOS DE LA CORRECCI√ìN:")
        print(f"  ‚úÖ Tel√©fonos corregidos exitosamente: {telefonos_corregidos}")
        print(f"  ‚ùå Tel√©fonos que no se pudieron corregir: {telefonos_perdidos}")
        print(f"  üìà Porcentaje de √©xito: {(telefonos_corregidos/telefonos_originales)*100:.1f}%")
        
        # Mostrar algunos ejemplos de correcciones
        print(f"\nüìã EJEMPLOS DE CORRECCIONES:")
        ejemplos_corregidos = df_corregido[df_corregido[columna_telefono].notna()].head(5)
        for i, (_, row) in enumerate(ejemplos_corregidos.iterrows(), 1):
            original = row[f'{columna_telefono}_Original']
            corregido = row[columna_telefono]
            print(f"  {i}. '{original}' -> '{corregido}'")
        
        # Crear directorio de salida
        directorio_corregidos = crear_directorio_corregidos()
        
        # Crear nombre de archivo con timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        nombre_base = os.path.splitext(os.path.basename(archivo_excel))[0]
        nombre_archivo = f"{nombre_base}_telefonos_corregidos_{timestamp}.xlsx"
        ruta_completa = os.path.join(directorio_corregidos, nombre_archivo)
        
        # Guardar el archivo corregido
        print(f"\nüíæ Guardando archivo corregido...")
        
        # Crear el archivo Excel con m√∫ltiples hojas
        with pd.ExcelWriter(ruta_completa, engine='openpyxl') as writer:
            # Hoja principal: Datos corregidos (sin la columna _Original)
            df_final = df_corregido.drop(columns=[f'{columna_telefono}_Original'])
            df_final.to_excel(writer, sheet_name='Datos_Corregidos', index=False)
            
            # Hoja de comparaci√≥n: Mostrando original vs corregido
            df_comparacion = df_corregido[[col for col in df_corregido.columns if col != columna_telefono]]
            df_comparacion.insert(1, f'{columna_telefono}_Corregido', df_corregido[columna_telefono])
            df_comparacion.to_excel(writer, sheet_name='Comparaci√≥n', index=False)
            
            # Hoja de estad√≠sticas
            estadisticas_data = {
                'M√©trica': [
                    'Total de registros',
                    'Tel√©fonos originales no nulos',
                    'Tel√©fonos corregidos exitosamente',
                    'Tel√©fonos que no se pudieron corregir',
                    'Porcentaje de √©xito',
                    'Fecha de procesamiento',
                    'Archivo original',
                    'Columna procesada'
                ],
                'Valor': [
                    total_registros,
                    telefonos_originales,
                    telefonos_corregidos,
                    telefonos_perdidos,
                    f"{(telefonos_corregidos/telefonos_originales)*100:.1f}%",
                    datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    os.path.basename(archivo_excel),
                    columna_telefono
                ]
            }
            
            df_estadisticas = pd.DataFrame(estadisticas_data)
            df_estadisticas.to_excel(writer, sheet_name='Estad√≠sticas', index=False)
        
        print(f"‚úÖ Archivo guardado exitosamente en: {ruta_completa}")
        print(f"\nüìö El archivo contiene 3 hojas:")
        print(f"    - Datos_Corregidos: Tu archivo con tel√©fonos corregidos (¬°listo para usar!)")
        print(f"    - Comparaci√≥n: Ver original vs corregido lado a lado")
        print(f"    - Estad√≠sticas: Resumen del proceso de correcci√≥n")
        
        # Mostrar informaci√≥n adicional
        print(f"\nüîç INFORMACI√ìN ADICIONAL:")
        print(f"  - Los n√∫meros que no se pudieron corregir aparecen como vac√≠os")
        print(f"  - Todos los n√∫meros corregidos siguen el formato: 549XXXXXXXXX")
        print(f"  - Las dem√°s columnas permanecen exactamente iguales")
        
        return df_corregido
        
    except FileNotFoundError:
        print(f"‚ùå Error: No se encontr√≥ el archivo {archivo_excel}")
        return None
    except Exception as e:
        print(f"‚ùå Error al procesar el archivo: {e}")
        import traceback
        traceback.print_exc()
        return None


def main():
    """
    Funci√≥n principal para ejecutar la correcci√≥n.
    """
    print("="*70)
    print("CORRECCI√ìN DE N√öMEROS DE TEL√âFONO - EXCEL")
    print("="*70)
    
    # Verificar si existe el archivo
    if not os.path.exists(ARCHIVO_EXCEL):
        print(f"‚ùå No se encontr√≥ el archivo: {ARCHIVO_EXCEL}")
        print("Por favor, aseg√∫rate de que el archivo est√© en el directorio correcto.")
        return
    
    # Ejecutar correcci√≥n
    resultado = corregir_telefonos_excel(ARCHIVO_EXCEL)
    
    if resultado is not None:
        print(f"\n‚úÖ Correcci√≥n completada exitosamente")
        print(f"üìÅ Busca tu archivo corregido en el directorio 'corregidos/'")
        print(f"üéØ El archivo principal est√° en la hoja 'Datos_Corregidos'")
    else:
        print(f"\n‚ùå La correcci√≥n no pudo completarse")
    
    print("="*70)


if __name__ == "__main__":
    main()